from telegram import *
from telegram.ext import *
import requests
import json
from types import SimpleNamespace
import math
import random
import time
from datetime import datetime
import pytz

kyc = "üë®‚Äçüíª X√°c minh KYC"
uytin = "üíé DS Uy t√≠n"

domain = "https://chousd.com"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    buttons = [[KeyboardButton(uytin)]]

    reply_markup = ReplyKeyboardMarkup(buttons, resize_keyboard=True)
    await context.bot.send_message(chat_id=update.effective_chat.id, text="Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi <b>Ch·ª£ MMO</b>. Click n√∫t b√™n d∆∞·ªõi ƒë·ªÉ ki·ªÉm tra danh s√°ch uy t√≠n.", reply_markup=reply_markup, parse_mode=constants.ParseMode.HTML)


async def messageHandler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    username = update.effective_user.username
    chat_id = update.effective_chat.id

    if update.message.chat.type != "private":

        if "/uytin" in update.message.text:
            reply_markup = InlineKeyboardMarkup(
                [[InlineKeyboardButton(text='|<', callback_data='first'),
                  InlineKeyboardButton(text='<', callback_data='prev'),
                  InlineKeyboardButton(text='>', callback_data='next'),
                  InlineKeyboardButton(text='>|', callback_data='last')]],
            )

            await context.bot.send_message(chat_id, text=content(1), reply_markup=reply_markup, parse_mode=constants.ParseMode.HTML)

        if "uy t√≠n" in update.message.text:

            requests.post(f"{domain}/api/add-user",{'username': f"@{username}"})

            reply_markup = InlineKeyboardMarkup(
                [[InlineKeyboardButton(text='VOTE UY T√çN', callback_data='vote')]],
            )

            start_time = time.time()
            seconds = abs(time.time() - start_time - 300)
            time_remaining = time.strftime("%M:%S", time.gmtime(seconds))

            text = f"<b>Bi·ªÉu quy·∫øt uy t√≠n @{username}</b>\n<i>Th·ªùi gian c√≤n: {time_remaining}</i> ‚è±"

            msg = await context.bot.send_message(chat_id, text=text, reply_markup=reply_markup, parse_mode=constants.ParseMode.HTML)

            #delete last message
            try:
                res = requests.get(f"{domain}/api/votings/@{username}")
                last_msg_id = res.json()["msg_id"]
                await context.bot.delete_message(message_id=last_msg_id, chat_id='-654706459')

                requests.post(f"{domain}/api/voting", {'username': f'@{username}','start_time': start_time, 'msg_id':  msg.message_id})
            except:
                requests.post(f"{domain}/api/voting", {'username': f'@{username}','start_time': start_time, 'msg_id':  msg.message_id})

        return

    # if username is None:
    #     await context.bot.send_message(chat_id, text="Vui l√≤ng c·∫≠p nh·∫≠t Username c·ªßa b·∫°n!")
    #     return

    # if kyc in update.message.text:
    #     link = f"https://kyc.chootc.com/#/{username}-{chat_id}"

    #     reply_markup = InlineKeyboardMarkup(
    #         [[InlineKeyboardButton(text='Ti·∫øn h√†nh KYC', url=link)]],
    #     )

    #     text = "<b>üî• X√°c minh danh t√≠nh c·ªßa b·∫°n!</b> \n \n<i>H√£y th·ª±c hi·ªán theo c√°c b∆∞·ªõc d∆∞·ªõi ƒë√¢y</i> \n1. Chu·∫©n b·ªã thi·∫øt b·ªã c·ªßa b·∫°n: cho ph√©p tr√¨nh duy·ªát truy c·∫≠p ƒë·ªãnh v·ªã v√† camera. \n2. Nh·∫•n v√†o n√∫t <b>Ti·∫øn h√†nh KYC</b>. \n3. L√†m theo h∆∞·ªõng d·∫´n tr√™n tr√¨nh duy·ªát."

    #     await context.bot.send_message(chat_id, text=text, reply_markup=reply_markup, parse_mode=constants.ParseMode.HTML)

    if "/uytin" in update.message.text or uytin in update.message.text:

        if "@" in update.message.text:

            username = update.message.text[8:]
            res = requests.get(
                f"{domain}/api/check-user/{username}")

            if res.text == "":
                text = f"@{username} kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng!"
                await context.bot.send_message(chat_id, text=text)
                return

            if res.json()['transaction'] is None:
                text = f"@{username} ch∆∞a c√≥ giao d·ªãch n√†o th√†nh c√¥ng"
            else:
                text = f"@{username} ƒë√£ giao d·ªãch th√†nh c√¥ng {res.json()['transaction']} l·∫ßn"

                if res.json()['reputation'] == 'yes':
                    text += " - Uy t√≠n üíé"

            await context.bot.send_message(chat_id, text=text)
            return

        reply_markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='|<', callback_data='first'),
             InlineKeyboardButton(text='<', callback_data='prev'),
             InlineKeyboardButton(text='>', callback_data='next'),
             InlineKeyboardButton(text='>|', callback_data='last')]],
        )

        await context.bot.send_message(chat_id, text=content(1), reply_markup=reply_markup, parse_mode=constants.ParseMode.HTML)

    # if "/kyc" in update.message.text:

    #     if "@" not in update.message.text:
    #         await context.bot.send_message(chat_id, text="Sai c√∫ ph√°p, ph·∫£i c√≥ @ tr∆∞·ªõc Username!")
    #         return

    #     username = update.message.text[6:]
    #     res = requests.get(
    #         f"{domain}/api/check-user/{username}")

    #     if res.text == "":
    #         text = f"@{username} ch∆∞a g·ª≠i th√¥ng tin KYC!"
    #         await context.bot.send_message(chat_id, text=text)
    #         return

    #     if res.json()['kyc'] == 'pending':
    #         text = f"@{username} KYC ƒëang ch·ªù x√©t duy·ªát!"
    #     if res.json()['kyc'] == 'success':
    #         text = f"@{username} ƒë√£ KYC th√†nh c√¥ng!"
    #     if res.json()['kyc'] == 'failed':
    #         text = f"@{username} KYC th·∫•t b·∫°i! Li√™n h·ªá Admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£."

    #     await context.bot.send_message(chat_id, text=text)


def content(page):
    res = requests.get(f"{domain}/api/get-top?page={page}")

    text = "<b>üî• X·∫øp h·∫°ng uy t√≠n üî•</b>\n\n<i>X·∫øp h·∫°ng d·ª±a theo s·ªë l·∫ßn xin uy t√≠n th√†nh c√¥ng</i>\n"

    for index, item in enumerate(res.json()['data']):
        text += f"- {item['username']} ({item['transaction']} l·∫ßn)"
        if item['reputation'] == 'yes':
            text += " - Uy t√≠n üíé\n"
        else:
            text += "\n"

    text += f"\nTrang: {page}/{math.ceil(res.json()['total']/res.json()['per_page'])}"
    return text


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message_id = update.effective_message.id
    chat_id = update.effective_chat.id
    username = update.effective_user.username

    query = update.callback_query
    await query.answer()

    if query.data in ["first", "prev", "next", "last"]:

        page = update.effective_message.text[-3:]
        current_page = int(page[:1])
        last_page = int(page[-1:])

        reply_markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='|<', callback_data='first'),
              InlineKeyboardButton(text='<', callback_data='prev'),
              InlineKeyboardButton(text='>', callback_data='next'),
              InlineKeyboardButton(text='>|', callback_data='last')]],
        )

        if query.data == "first":
            if current_page == 1:
                return
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=content(1), reply_markup=reply_markup, parse_mode=constants.ParseMode.HTML)
        if query.data == "prev":
            if current_page > 1:
                p = current_page - 1
            else:
                return
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=content(p), reply_markup=reply_markup, parse_mode=constants.ParseMode.HTML)
        if query.data == "next":
            if current_page < last_page:
                p = current_page + 1
            else:
                return
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=content(p), reply_markup=reply_markup, parse_mode=constants.ParseMode.HTML)
        if query.data == "last":
            if current_page == last_page:
                return
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=content(page[-1:]), reply_markup=reply_markup, parse_mode=constants.ParseMode.HTML)

        return
    
    if query.data in ["vote"]:
        #get username is voted
        voting_user = update.effective_message.text.split("\n")[0].split()[-1]

        if username in voting_user:
            return
        
        reply_markup = InlineKeyboardMarkup(
            [[InlineKeyboardButton(text='VOTE UY T√çN', callback_data='vote')]],
        )

        res = requests.get(f"{domain}/api/votings/{voting_user}")
        start_time = res.json()["start_time"]
        voted_list = res.json()["voted_user"]

        if time.time() - float(start_time) > 300:
            text = update.effective_message.text.split("\n")
            del text[1]
            text[0] = f"<b>K·∫øt qu·∫£ bi·ªÉu quy·∫øt uy t√≠n {voting_user}</b>"
            text[1] = f"<b>{text[1]}</b>"
            text[-1] = f"<b>{text[-1]}</b>"

            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text="\n".join(text), parse_mode=constants.ParseMode.HTML)
        else:
            # get current time
            seconds = abs(time.time() - float(start_time) - 300)
            time_remaining = time.strftime("%M:%S", time.gmtime(seconds))
            # current_time = time.strftime("%H:%M", time.localtime())
            current_time = datetime.now(tz=pytz.timezone('Asia/Ho_Chi_Minh'))
            current_hour = str(current_time)[11:16]

            #check user is admin
            response = requests.get(f"{domain}/api/isadmin/@{username}")
            if response.text:
                is_admin = "(Admin)"
            else:
                is_admin = ""

            #check user and set vote
            global voted_user

            if not voted_list:
                voted_user = f'@{username} {is_admin}'
                requests.put(f"{domain}/api/voting/{voting_user}",{'voted_user': voted_user})
            if voted_list and username not in voted_list:
                voted_user = f'{voted_list}\n@{username} {is_admin}'
                requests.put(f"{domain}/api/voting/{voting_user}",{'voted_user': voted_user})
            if voted_list and username in voted_list:
                return
            
            #export voted user list
            percent = 0
            has_admin = False
            voted_array = voted_user.split("\n")
            for index, item in enumerate(voted_array):
                if not index:
                    list_text = f"{index+1}. {item}"
                else:
                    list_text = f"{list_text}\n{index+1}. {item}"
                
                if "Admin" in item:
                    percent += 30
                    has_admin = True
                else:
                    percent += 15

            if percent < 100:
                result = f"T·ª∑ l·ªá: {percent}% | Ch∆∞a ƒë·ªß uy t√≠n ƒë·ªÉ giao d·ªãch üî¥"
            else:
                if has_admin:
                    result = f"T·ª∑ l·ªá: 100% | ƒê√£ ƒë·ªß uy t√≠n ƒë·ªÉ giao d·ªãch üü¢"
                    requests.post(f"{domain}/api/update-rep",{'username': voting_user})
                else:
                    percent_random = random.randrange(83, 96)
                    result = f"T·ª∑ l·ªá: {percent_random}% | Ch∆∞a ƒë·ªß uy t√≠n ƒë·ªÉ giao d·ªãch üî¥"   

            text = f"<b>Bi·ªÉu quy·∫øt uy t√≠n {voting_user}</b>\n<i>Th·ªùi gian c√≤n: {time_remaining}</i> ‚è±\n<b>Danh s√°ch ƒë√£ cho uy t√≠n:</b>\n{list_text}\n\n<b>{result}</b>"
            await context.bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=text, reply_markup=reply_markup, parse_mode=constants.ParseMode.HTML)


app = ApplicationBuilder().token(
    "6221060241:AAHk9evaieypMU8SnO-H8YhnuMRVA0UVi8g").build()

app.add_handler(CommandHandler("start", start)) 
app.add_handler(CallbackQueryHandler(button))
app.add_handler(MessageHandler(filters.ALL, messageHandler))


# auto send message
async def callback_minute(context: ContextTypes.DEFAULT_TYPE):

    list = [
        "<b>Th√†nh Vi√™n Uy T√≠n L√† Ai ?</b>\nL√† nh·ªØng th√†nh vi√™n bu√¥n b√°n th√¢m ni√™n, chuy√™n nghi·ªáp, c√≥ uy t√≠n cao trong c·ªông ƒë·ªìng. Huy hi·ªáu uy t√≠n ph·∫£i ƒë∆∞·ª£c ƒë·ªôi ng≈© b·∫£n qu·∫£n l√Ω ch·ª£ c·∫•p.\n<b>L√†m th·∫ø n√†o ƒë·ªÉ tr·ªü th√†nh TV uy t√≠n ?</b>\n- C√≥ tr√™n 6 th√°ng ho·∫°t ƒë·ªông bu√¥n b√°n t·∫°i Ch·ª£ OTC VN.\n- Giao d·ªãch th√†nh c√¥ng t·ªëi thi·ªÉu 30 l·∫ßn.\n- ƒê∆∞·ª£c check th√¥ng tin c·ª• th·ªÉ v√† ph√™ duy·ªát t·ª´ 3 Admin.\n\n<i>Chat /uytin v·ªõi bot @ChoOTCVN_bot ƒë·ªÉ ki·ªÉm tra danh s√°ch uy t√≠n!</i>",

        ]
    
    # try:
    #     res = requests.get(f"{domain}/api/setup")
    #     last_msg_id = res.json()[0]["value"]
    #     await context.bot.delete_message(message_id=last_msg_id, chat_id='-1001871429218')
    #     msg = await context.bot.send_message(chat_id='-1001871429218', text=random.choice(list), parse_mode=constants.ParseMode.HTML)
    #     requests.put(f"{domain}/api/setup/3", {'value': msg.message_id})
    # except:
    #     msg = await context.bot.send_message(chat_id='-1001871429218', text=random.choice(list), parse_mode=constants.ParseMode.HTML)
    #     requests.put(f"{domain}/api/setup/3", {'value': msg.message_id})


# job_queue = app.job_queue

# job_minute = job_queue.run_repeating(callback_minute, interval=7200, first=10)

app.run_polling()
